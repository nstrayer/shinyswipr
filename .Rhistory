library(shiny); runApp('test.R')
runApp('swipeDemo.R')
clear
clc
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
library(shiny); runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
?gsub
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
library(shiny); runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
install.packages(fortunes)
install.packages("Fortunes")
install.packages("Fortunes")
install.packages("fortunes")
fortune()
library(fortunes)
library(fortunes)
fortune()
?renderText
runApp('swipeDemo.R')
fortune()
myquote <- fortune()
myquote <- fortune()$quote
runApp('swipeDemo.R')
runApp('swipeDemo.R')
quote = fortune()
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
test = "hello-world"
strsplit(test, "-")
strsplit(test, "-")[2]
strsplit(test, "-")[[1]][2]
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
runApp('swipeDemo.R')
devtools::build()
devtools::document()
devtools::install()
library(shinyswipr)
?shinySwipr
?shinySwiprUI
devtools::build()
devtools::document()
devtools::install()
library(shinyswipr)
library(shiny); runApp('demo/demo_app.R')
?dataTableOutput
runApp('demo/demo_app.R')
devtools::install_github("nstrayer/shinyswipr")
runApp('demo/shinyswipr_demo.R')
runApp('demo/shinyswipr_demo.R')
devtools::build()
devtools::document()
devtools::install()
?shinySwipr
?shinyApp
?shinyApp
library(shiny)
?shinyApp
runApp('demo/shinyswipr_demo.R')
runApp('demo/shinyswipr_demo.R')
runApp('demo/shinyswipr_demo.R', display.mode = "showcase")
source('~/research/hopkins/shinyModules/demo/local_build_install.R', echo=TRUE)
#App is a simple card with some content and a little output below that represents the last swipes result.
# devtools::install_github("nstrayer/shinyswipr")
library(shinyswipr)
library(shiny)
library(fortunes)
ui <- fixedPage(
h1("Stats Quotes"),
p("This is a simple demo of the R package shinyswipr. Swipe on the quote card below to store your rating. What each direction (up, down, left, right) mean is up to you. (We won't tell.)"),
hr(),
shinySwiprUI( "quote_swiper",
h4("Swipe Me!"),
hr(),
h4("Quote:"),
textOutput("quote"),
h4("Author(s):"),
textOutput("quote_author")
),
hr(),
h4("Swipe History"),
tableOutput("resultsTable")
)
server <- function(input, output, session) {
card_swipe <- callModule(shinySwipr, "quote_swiper")
appVals <- reactiveValues(
quote = fortune(),
swipes = data.frame(quote = character(), author = character(), swipe = character())
)
our_quote <- isolate(appVals$quote)
output$quote <- renderText({ our_quote$quote })
output$quote_author <- renderText({ paste0("-",our_quote$author) })
output$resultsTable <- renderDataTable({appVals$swipes})
observeEvent( card_swipe(),{
#Record our last swipe results.
appVals$swipes <- rbind(
data.frame(quote = appVals$quote$quote,
author = appVals$quote$author,
swipe = card_swipe()
),
appVals$swipes
)
#send results to the output.
output$resultsTable <- renderTable({appVals$swipes})
#update the quote
appVals$quote <- fortune()
#send update to the ui.
output$quote <- renderText({
appVals$quote$quote
})
output$quote_author <- renderText({
paste0("-",appVals$quote$author)
})
}) #close event observe.
}
shinyApp(ui, server)
runApp('demo/shinyswipr_demo.R')
runApp('demo/shinyswipr_demo.R')
runApp('demo/shinyswipr_demo.R')
runApp('demo/shinyswipr_demo.R')
runApp('demo/shinyswipr_demo.R')
devtools::build()
# devtools::document()
devtools::install()
devtools::build()
# devtools::document()
devtools::install()
devtools::build()
devtools::document()
devtools::install()
runApp('demo/shinyswipr_demo.R')
devtools::build()
devtools::document()
devtools::install()
runApp('demo/shinyswipr_demo.R')
runApp('demo/shinyswipr_demo.R')
library(shiny); runApp('demo/shinyswipr_demo.R')
devtools::load_all()
runApp('demo/shinyswipr_demo.R')
devtools::load_all()
runApp('demo/shinyswipr_demo.R')
devtools::load_all()
runApp('demo/shinyswipr_demo.R')
devtools::load_all()
runApp('demo/shinyswipr_demo.R')
shiny_swipe_file <- .get_script("shinySwiper.js", "js")
shiny_swipe_file
devtools::load_all()
shiny_swipe_file
runApp('demo/shinyswipr_demo.R')
grepl(pattern = "swipe:",shiny_swipe_file)
grep(pattern = "swipe:",shiny_swipe_file)
gsub("swipe:","swipeLeft:"shiny_swipe_file)
gsub("swipe:","swipeLeft:",shiny_swipe_file)
shiny_swipe_file2 <- gsub("swipe:","swipeLeft:",shiny_swipe_file)
runApp('demo/shinyswipr_demo.R')
devtools::load_all()
runApp('demo/shinyswipr_demo.R')
print(shiny_swipe_file2)
cat(shiny_swipe_file2)
require(tm)
x <- Hmisc::Cs(1.01,
11.21,
123.35,
212.11)
corpus = Corpus(VectorSource(x))
dtm = DocumentTermMatrix(corpus)
dtm_df = as.data.frame(as.matrix(dtm))
dtm_df
dtm_df = as.data_frame(as.matrix(dtm))
dtm_df = data_frame(as.matrix(dtm))
dtm_df = tibble::data_frame(as.matrix(dtm))
